{"ast":null,"code":"import _objectSpread from\"/root/react-apps/back_end/be-youtiful/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/root/react-apps/back_end/be-youtiful/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useSprings,animated,interpolate}from'react-spring';import{useDrag}from'react-use-gesture';var cards=['https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg','https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg','https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg','https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg','https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg','https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg'];// These two are just helpers, they curate spring data, values that are later being interpolated into css\nvar to=function to(i){return{x:0,y:i*-4,scale:1,rot:-10+Math.random()*20,delay:i*100};};var from=function from(i){return{x:0,rot:0,scale:1.5,y:-1000};};// This is being used down there in the view, it interpolates rotation and scale into a css transform\nvar trans=function trans(r,s){return\"perspective(1500px) rotateX(30deg) rotateY(\".concat(r/10,\"deg) rotateZ(\").concat(r,\"deg) scale(\").concat(s,\")\");};var Gallery=function Gallery(){var _useState=useState(function(){return new Set();}),_useState2=_slicedToArray(_useState,1),gone=_useState2[0];// The set flags all the cards that are flicked out\nvar _useSprings=useSprings(cards.length,function(i){return _objectSpread({},to(i),{from:from(i)});}),_useSprings2=_slicedToArray(_useSprings,2),props=_useSprings2[0],set=_useSprings2[1];// Create a bunch of springs using the helpers above\n// Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\nvar bind=useDrag(function(_ref){var _ref$args=_slicedToArray(_ref.args,1),index=_ref$args[0],down=_ref.down,_ref$movement=_slicedToArray(_ref.movement,1),mx=_ref$movement[0],distance=_ref.distance,_ref$direction=_slicedToArray(_ref.direction,1),xDir=_ref$direction[0],velocity=_ref.velocity;var trigger=velocity>0.2;// If you flick hard enough it should trigger the card to fly out\nvar dir=xDir<0?-1:1;// Direction should either point left or right\nif(!down&&trigger)gone.add(index);// If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\nset(function(i){if(index!==i)return;// We're only interested in changing spring-data for the current spring\nvar isGone=gone.has(index);var x=isGone?(200+window.innerWidth)*dir:down?mx:0;// When a card is gone it flys out left or right, otherwise goes back to zero\nvar rot=mx/100+(isGone?dir*10*velocity:0);// How much the card tilts, flicking it harder makes it rotate faster\nvar scale=down?1.1:1;// Active cards lift up a bit\nreturn{x:x,rot:rot,scale:scale,delay:undefined,config:{friction:50,tension:down?800:isGone?200:500}};});if(!down&&gone.size===cards.length)setTimeout(function(){return gone.clear()||set(function(i){return to(i);});},600);});// Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\nreturn props.map(function(_ref2,i){var x=_ref2.x,y=_ref2.y,rot=_ref2.rot,scale=_ref2.scale;return React.createElement(animated.div,{key:i,style:{x:x,y:y}},React.createElement(animated.div,Object.assign({},bind(i),{style:{transform:interpolate([rot,scale],trans),backgroundImage:\"url(\".concat(cards[i],\")\")}})));});};export default Gallery;","map":{"version":3,"sources":["/root/react-apps/back_end/be-youtiful/src/components/pages/Gallery.js"],"names":["React","useState","useSprings","animated","interpolate","useDrag","cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","Gallery","Set","gone","length","props","set","bind","args","index","down","movement","mx","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","transform","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport { useDrag } from 'react-use-gesture'\n\n\nconst cards = [\n  'https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg',\n  'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg'\n]\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\nconst Gallery = () => {\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useDrag(({ args: [index], down, movement: [mx], distance, direction: [xDir], velocity }) => {\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n    set(i => {\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\n      const isGone = gone.has(index)\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? mx : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n      const rot = mx / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\n    })\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\n  })\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div key={i} style={{ x, y }}>\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\n    </animated.div>\n  ))\n}\n\nexport default Gallery"]},"metadata":{},"sourceType":"module"}